///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class AnalysisEditXXXOperationsProtocol
    {
    	Dictionary<System.Windows.Point,Tuple<System.Windows.Point,Boolean>> points;
    	
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidatePadIsReadOnly()
        {
        	Validate.AreEqual(repo.ProtocolAnalysisDesktop.PadText.Element.GetAttributeValueText("IsReadOnly"), "True", "Validate Pad is Readonly");
        }

        public void ValidatePlateIsReadOnly()
        {
        	Validate.AreEqual(repo.ProtocolAnalysisDesktop.TabControlGrid1.Grid_of_EndpointGrid.Element.GetAttributeValueText("IsManipulationEnabled"), "False", "Validate Plate is Readonly");
        }
        
        public void InitializeFlaggablePointsDictionary()
        {
        	points = ((Dictionary<System.Windows.Point,Tuple<System.Windows.Point,Boolean>>)repo.ProtocolAnalysisDesktop.TabControlGrid1.ChartTab.Find<Ranorex.WpfElement>("./container[@type='AnalysisControl']")[0].Element.GetAttributeValue("FlaggablePoints"));		
        }

        public void ToggleFlagPointOnMeasurementsChart(string pointX, string pointY)
        {
        	Delay.Seconds(3);
        	InitializeFlaggablePointsDictionary();
        	var pointValue = points[new System.Windows.Point(Convert.ToDouble(pointX), Convert.ToDouble(pointY))];

        	repo.ProtocolAnalysisDesktop.ChartAreaOnMeasurements.Click(new Location(((int)pointValue.Item1.X), ((int)pointValue.Item1.Y)));
        	Delay.Seconds(3);
        }

        public void ValidatePointFlagState(bool expectedState, string pointX, string pointY)
        {
        	InitializeFlaggablePointsDictionary();
        	var pointValue = points[new System.Windows.Point(Convert.ToDouble(pointX), Convert.ToDouble(pointY))];
        	Validate.AreEqual(pointValue.Item2, expectedState, String.Format("Validate point flag state is {0}", expectedState));
        }

        public void ValidatePlateIDsIsReadonly()
        {
        	Validate.AreEqual(repo.ProtocolAnalysisDesktop.TabControlGrid1.SeriesDataGrid.Element.GetAttributeValueText("IsManipulationEnabled"), "False", 
        	                  "Validate Plate IDs tableis Readonly");
        }

        public void ClickCanvasCell(int index)
        {
        	Report.Log(ReportLevel.Info, "Mouse", String.Format("Click canvas cell {0}", index));
        	repo.ProtocolAnalysisDesktop.Canvas.Find<Ranorex.WpfElement>(String.Format(".//element[@AutomationId~'LAYOUT_{0}']", index))[0].Click();
        }

        public void CheckNotFlagged(int index)
        {
        	Validate.IsFalse(repo.ProtocolAnalysisDesktop.Canvas.Find<Ranorex.WpfElement>(String.Format(".//element[@automationid='FLAG_{0}']", index))[0].Visible, String.Format("Validate cell {0} is not flagged", index));
        }
        
        
        public void OpenPropertiesEditor()
        {
        	OpenProperties.OpenPropertiesInProtocolAnalysis();
        }

        public void ValidateAddElementNotVisible()
        {
        	Validate.IsFalse(repo.ProtocolAnalysisDesktop.AddElementInfo.Exists(TimeSpan.FromSeconds(10)) && repo.ProtocolAnalysisDesktop.AddElement.Visible,
        	                "Validate Add element button not visible");
        }

        public void ValidateRemoveElementNotVisible()
        {
        	Validate.IsFalse(repo.ProtocolAnalysisDesktop.RemoveInfo.Exists(TimeSpan.FromSeconds(10)) && repo.ProtocolAnalysisDesktop.Remove.Visible,
        	                "Validate Remove element button not visible");
        }
    }
}