///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class UpdatingAfterPlateChange
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void RunAnalysis(string protocolName)
        {
        	StartAnalysisHelper.Protocol = protocolName;
            StartAnalysisHelper.StartAnalysis();
            Delay.Seconds(HelperConstants.TIME_TO_OPEN_PROTOCOL);
        }

        public void checkFlaggedAmount(int expectedCount, Adapter adapter)
        {
            MeasurementsHelper helper = new MeasurementsHelper();
        	var plateValues = helper.GetFlaggedPlateValues(adapter);      
        	
        	int crossedCount = 0;       	
        	
        	foreach(bool item in plateValues)
            {
        		if( item.Equals(true))
            	{
            		crossedCount++;
            	}
        		Report.Info(String.Format("element: " + item));
            }  
        	Report.Info(String.Format("Is crossed: {0}.", crossedCount));
        	Report.Info(String.Format("Expected crossed count: {0}.", expectedCount));
        	
        	Validate.AreEqual(crossedCount, expectedCount, "On the plate control, flagged positions are as expected.");
        }

        public void openProperties(Ranorex.Adapter adapter)
        {
        	if (adapter.Visible)
        	{
        		repo.ProtocolAnalysisDesktop.Properties.Click();
        	}
        	else
        	{
        		Report.Screenshot();
        	}
        }
    }
}