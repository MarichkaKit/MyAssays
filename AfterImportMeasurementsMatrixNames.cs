///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AfterImportMeasurementsMatrixNames recording.
    /// </summary>
    [TestModule("fc4f7884-8b50-4045-8592-5c48dd2e5426", ModuleType.Recording, 1)]
    public partial class AfterImportMeasurementsMatrixNames : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static AfterImportMeasurementsMatrixNames instance = new AfterImportMeasurementsMatrixNames();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AfterImportMeasurementsMatrixNames()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AfterImportMeasurementsMatrixNames Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            CleanHelper();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(1));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(2));
            Delay.Duration(10000, false);
            
            try {
                CheckMatrixNamesPad();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            CheckMatrixSelectionNames(repo.ResultsAnalysis.SelectionCombobox, ValueConverter.ArgumentFromString<int>("expCount", "26"), ValueConverter.ArgumentFromString<int>("loopCount", "26"));
            Delay.Milliseconds(0);
            
            openProperties(repo.ResultsAnalysis.PropertyEditorPanel);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.Transforms' at Center.", repo.ResultsAnalysis.TransformsInfo, new RecordItemIndex(7));
            repo.ResultsAnalysis.Transforms.Click();
            Delay.Milliseconds(200);
            
            CheckMatrixNamesAdapter(repo.ResultsAnalysis.inputMatrix, ValueConverter.ArgumentFromString<int>("expCount", "26"), ValueConverter.ArgumentFromString<int>("loopCount", "26"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.Matrices' at Center.", repo.ResultsAnalysis.MatricesInfo, new RecordItemIndex(9));
            repo.ResultsAnalysis.Matrices.Click();
            Delay.Milliseconds(200);
            
            try {
                CheckMatrixNamesMatrixTab();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.Evaluation' at Center.", repo.ResultsAnalysis.EvaluationInfo, new RecordItemIndex(11));
            repo.ResultsAnalysis.Evaluation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.AddEvalution' at Center.", repo.ResultsAnalysis.AddEvalutionInfo, new RecordItemIndex(12));
            repo.ResultsAnalysis.AddEvalution.Click();
            Delay.Milliseconds(200);
            
            CheckMatrixNamesAdapter(repo.ResultsAnalysis.EvaluationMatrix, ValueConverter.ArgumentFromString<int>("expCount", "27"), ValueConverter.ArgumentFromString<int>("loopCount", "26"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.RemoveEvalution' at Center.", repo.ResultsAnalysis.RemoveEvalutionInfo, new RecordItemIndex(14));
            repo.ResultsAnalysis.RemoveEvalution.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.Validation' at Center.", repo.ResultsAnalysis.ValidationInfo, new RecordItemIndex(15));
            repo.ResultsAnalysis.Validation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.AddValidation' at Center.", repo.ResultsAnalysis.AddValidationInfo, new RecordItemIndex(16));
            repo.ResultsAnalysis.AddValidation.Click();
            Delay.Milliseconds(200);
            
            CheckMatrixNamesAdapter(repo.ResultsAnalysis.ValidationCondition, ValueConverter.ArgumentFromString<int>("expCount", "27"), ValueConverter.ArgumentFromString<int>("loopCount", "26"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.RemoveValidation' at Center.", repo.ResultsAnalysis.RemoveValidationInfo, new RecordItemIndex(18));
            repo.ResultsAnalysis.RemoveValidation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.Property' at Center.", repo.ResultsAnalysis.PropertyInfo, new RecordItemIndex(19));
            repo.ResultsAnalysis.Property.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.CalculateBttn' at Center.", repo.ResultsAnalysis.CalculateBttnInfo, new RecordItemIndex(20));
            repo.ResultsAnalysis.CalculateBttn.Click();
            Delay.Milliseconds(200);
            
            WaitCalculation();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.ReportRibbonTab1' at Center.", repo.ResultsAnalysis.ReportRibbonTab1Info, new RecordItemIndex(22));
            repo.ResultsAnalysis.ReportRibbonTab1.Click();
            Delay.Milliseconds(700);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.OpenInExcelBttn' at Center.", repo.ResultsAnalysis.OpenInExcelBttnInfo, new RecordItemIndex(23));
            repo.ResultsAnalysis.OpenInExcelBttn.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(24));
            Delay.Duration(10000, false);
            
            try {
                CheckMatrixNamesXLSX();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
