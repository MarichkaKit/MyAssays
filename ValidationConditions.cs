///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ValidationConditions recording.
    /// </summary>
    [TestModule("6209fb90-1014-4c64-a592-25d99fb27fc7", ModuleType.Recording, 1)]
    public partial class ValidationConditions : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static ValidationConditions instance = new ValidationConditions();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ValidationConditions()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ValidationConditions Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            RunAnalysis("Matrix Transform Kinetics 12x8.assay-protocol");
            Delay.Milliseconds(0);
            
            OpenPropertyEditor();
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(3));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(4));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.AddValidation' at Center.", repo.ProtocolAnalysisDesktop.AddValidationInfo, new RecordItemIndex(5));
            repo.ProtocolAnalysisDesktop.AddValidation.Click();
            Delay.Milliseconds(200);
            
            selectValidationIem(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.AddCondition' at Center.", repo.ProtocolAnalysisDesktop.AddConditionInfo, new RecordItemIndex(7));
            repo.ProtocolAnalysisDesktop.AddCondition.Click();
            Delay.Milliseconds(200);
            
            checkCondition(ValueConverter.ArgumentFromString<int>("index", "0"), "Condition #1");
            Delay.Milliseconds(0);
            
            checkCondition(ValueConverter.ArgumentFromString<int>("index", "1"), "Condition #2");
            Delay.Milliseconds(0);
            
            selectCondition(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            changeDescription(ValueConverter.ArgumentFromString<int>("index", "0"), "Condition #11");
            Delay.Milliseconds(0);
            
            try {
                MoveScroll("MaxValue");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                changeTypes(ValueConverter.ArgumentFromString<int>("index", "1"), ValueConverter.ArgumentFromString<int>("typesCount", "2"));
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            selectCondition(ValueConverter.ArgumentFromString<int>("index", "1"));
            Delay.Milliseconds(0);
            
            changeType(ValueConverter.ArgumentFromString<int>("expectedCount", "3"));
            Delay.Milliseconds(0);
            
            try {
                MoveScroll("MinValue");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Matrices' at Center.", repo.ProtocolAnalysisDesktop.MatricesInfo, new RecordItemIndex(17));
            repo.ProtocolAnalysisDesktop.Matrices.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Total' at Center.", repo.ProtocolAnalysisDesktop.TotalInfo, new RecordItemIndex(18));
            repo.ProtocolAnalysisDesktop.Total.Click();
            Delay.Milliseconds(200);
            
            changeName("TotalTotal");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(20));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            checkMatrix(ValueConverter.ArgumentFromString<int>("index", "0"), "TotalTotal");
            Delay.Milliseconds(0);
            
            checkMatrix(ValueConverter.ArgumentFromString<int>("index", "1"), "TotalTotal");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.TabPageXML' at Center.", repo.ProtocolAnalysisDesktop.TabPageXMLInfo, new RecordItemIndex(23));
            repo.ProtocolAnalysisDesktop.TabPageXML.Click();
            Delay.Milliseconds(200);
            
            try {
                checkXmlChanges("ValidationConditions.txt");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(24)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(25));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            selectCondition(ValueConverter.ArgumentFromString<int>("index", "1"));
            Delay.Milliseconds(0);
            
            changeDescription(ValueConverter.ArgumentFromString<int>("index", "1"), "Condition #12");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.TabPageXML' at Center.", repo.ProtocolAnalysisDesktop.TabPageXMLInfo, new RecordItemIndex(28));
            repo.ProtocolAnalysisDesktop.TabPageXML.Click();
            Delay.Milliseconds(200);
            
            changeType("ChangeTypes.txt");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Apply' at Center.", repo.ProtocolAnalysisDesktop.ApplyInfo, new RecordItemIndex(30));
            repo.ProtocolAnalysisDesktop.Apply.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Transforms' at Center.", repo.ProtocolAnalysisDesktop.TransformsInfo, new RecordItemIndex(31));
            repo.ProtocolAnalysisDesktop.Transforms.Click();
            Delay.Milliseconds(200);
            
            changeOutput("Calc");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(33));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            selectValidationIem(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            checkMatrix(ValueConverter.ArgumentFromString<int>("index", "1"), "Calc");
            Delay.Milliseconds(0);
            
            selectCondition(ValueConverter.ArgumentFromString<int>("index", "1"));
            Delay.Milliseconds(0);
            
            try {
                MoveScroll("MaxValue");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            try {
                checkTypes("0", ValueConverter.ArgumentFromString<int>("typesCount", "2"));
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(38)); }
            
            try {
                MoveScroll("MinValue");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(39)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Transforms' at Center.", repo.ProtocolAnalysisDesktop.TransformsInfo, new RecordItemIndex(40));
            repo.ProtocolAnalysisDesktop.Transforms.Click();
            Delay.Milliseconds(200);
            
            toDeleteTransform(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ProtocolAnalysisDesktop.WarningMessageTextBlock'.", repo.ProtocolAnalysisDesktop.WarningMessageTextBlockInfo, new RecordItemIndex(42));
            Validate.Attribute(repo.ProtocolAnalysisDesktop.WarningMessageTextBlockInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            try {
                validateWarning("The XY Reduction Total transform cannot currently be removed because its output is used by a condition in the validation table ValidationsTable1. Please remove, or, modify the conditions in this validation table that use the Calc data before trying again.");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(43)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(44));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            selectValidationIem(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.RemoveValidation' at Center.", repo.ProtocolAnalysisDesktop.RemoveValidationInfo, new RecordItemIndex(46));
            repo.ProtocolAnalysisDesktop.RemoveValidation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Transforms' at Center.", repo.ProtocolAnalysisDesktop.TransformsInfo, new RecordItemIndex(47));
            repo.ProtocolAnalysisDesktop.Transforms.Click();
            Delay.Milliseconds(200);
            
            toDeleteTransform(ValueConverter.ArgumentFromString<int>("index", "0"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='False') on item 'ProtocolAnalysisDesktop.WarningMessageTextBlock'.", repo.ProtocolAnalysisDesktop.WarningMessageTextBlockInfo, new RecordItemIndex(49));
            Validate.Attribute(repo.ProtocolAnalysisDesktop.WarningMessageTextBlockInfo, "Visible", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.Validation' at Center.", repo.ProtocolAnalysisDesktop.ValidationInfo, new RecordItemIndex(50));
            repo.ProtocolAnalysisDesktop.Validation.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.AddValidation' at Center.", repo.ProtocolAnalysisDesktop.AddValidationInfo, new RecordItemIndex(51));
            repo.ProtocolAnalysisDesktop.AddValidation.Click();
            Delay.Milliseconds(200);
            
            checkNAMatrix(ValueConverter.ArgumentFromString<int>("index", "0"), "(NA)");
            Delay.Milliseconds(0);
            
            checkComboboxForItemCount(repo.ProtocolAnalysisDesktop.MatrixCondition1, ValueConverter.ArgumentFromString<int>("expectedCount", "1"));
            Delay.Milliseconds(0);
            
            checkComboboxForType(repo.ProtocolAnalysisDesktop.TypeProperty, ValueConverter.ArgumentFromString<int>("expectedCount", "2"), "Expression");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
