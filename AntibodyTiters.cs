///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AntibodyTiters recording.
    /// </summary>
    [TestModule("29b46ca9-de8e-4f40-9cb6-4cada04e3662", ModuleType.Recording, 1)]
    public partial class AntibodyTiters : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static AntibodyTiters instance = new AntibodyTiters();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AntibodyTiters()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AntibodyTiters Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Linear Regression Range - X Max:') on item 'ImportWizard.SomeContainer.LinearRegressionRangeXMax'.", repo.ImportWizard.SomeContainer.LinearRegressionRangeXMaxInfo, new RecordItemIndex(0));
            Validate.Attribute(repo.ImportWizard.SomeContainer.LinearRegressionRangeXMaxInfo, "Text", "Linear Regression Range - X Max:");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizard.SomeContainer.Finish' at 75;19.", repo.ImportWizard.SomeContainer.FinishInfo, new RecordItemIndex(1));
            repo.ImportWizard.SomeContainer.Finish.Click("75;19");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(2));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis.ResultsTab'.", repo.ResultsAnalysis.ResultsTabInfo, new RecordItemIndex(3));
            Validate.Exists(repo.ResultsAnalysis.ResultsTabInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Selected='True') on item 'ResultsAnalysis.ResultsTab'.", repo.ResultsAnalysis.ResultsTabInfo, new RecordItemIndex(4));
            Validate.Attribute(repo.ResultsAnalysis.ResultsTabInfo, "Selected", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.SampleIDsTabPage' at Center.", repo.ResultsAnalysis.SampleIDsTabPageInfo, new RecordItemIndex(5));
            repo.ResultsAnalysis.SampleIDsTabPage.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis.StandConcParamTable'.", repo.ResultsAnalysis.StandConcParamTableInfo, new RecordItemIndex(6));
            Validate.Exists(repo.ResultsAnalysis.StandConcParamTableInfo);
            Delay.Milliseconds(100);
            
            CheckSampleIDs();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.LinerRegrationRangeTab' at Center.", repo.ResultsAnalysis.LinerRegrationRangeTabInfo, new RecordItemIndex(8));
            repo.ResultsAnalysis.LinerRegrationRangeTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='X Min') on item 'ResultsAnalysis.TabControlGrid.XMin'.", repo.ResultsAnalysis.TabControlGrid.XMinInfo, new RecordItemIndex(9));
            Validate.Attribute(repo.ResultsAnalysis.TabControlGrid.XMinInfo, "Text", "X Min");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='X Max') on item 'ResultsAnalysis.TabControlGrid.XMax'.", repo.ResultsAnalysis.TabControlGrid.XMaxInfo, new RecordItemIndex(10));
            Validate.Attribute(repo.ResultsAnalysis.TabControlGrid.XMaxInfo, "Text", "X Max");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='5') on item 'ResultsAnalysis.TabControlGrid.TextMin'.", repo.ResultsAnalysis.TabControlGrid.TextMinInfo, new RecordItemIndex(11));
            Validate.Attribute(repo.ResultsAnalysis.TabControlGrid.TextMinInfo, "Text", "5");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='5') on item 'ResultsAnalysis.TabControlGrid.TextMax'.", repo.ResultsAnalysis.TabControlGrid.TextMaxInfo, new RecordItemIndex(12));
            Validate.Attribute(repo.ResultsAnalysis.TabControlGrid.TextMaxInfo, "Text", "5");
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
