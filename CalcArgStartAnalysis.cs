///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CalcArgStartAnalysis recording.
    /// </summary>
    [TestModule("ecbdf778-c8b5-4aec-b24f-faaadf151b27", ModuleType.Recording, 1)]
    public partial class CalcArgStartAnalysis : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static CalcArgStartAnalysis instance = new CalcArgStartAnalysis();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CalcArgStartAnalysis()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CalcArgStartAnalysis Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            StartAnalysis();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 30s.", new RecordItemIndex(1));
            Delay.Duration(30000, false);
            
            Validate_ResultsAnalysis();
            Delay.Milliseconds(0);
            
            IsReportTabExist();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.SheetView' at Center.", repo.ResultsAnalysis.SheetViewInfo, new RecordItemIndex(5));
            repo.ResultsAnalysis.SheetView.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(6));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis.GraphElement'.", repo.ResultsAnalysis.GraphElementInfo, new RecordItemIndex(7));
            Validate.Exists(repo.ResultsAnalysis.GraphElementInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis.ResultsElement'.", repo.ResultsAnalysis.ResultsElementInfo, new RecordItemIndex(8));
            Validate.Exists(repo.ResultsAnalysis.ResultsElementInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(9));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Selected='True') on item 'ResultsAnalysis.ResultsTab'.", repo.ResultsAnalysis.ResultsTabInfo, new RecordItemIndex(10));
            Validate.Attribute(repo.ResultsAnalysis.ResultsTabInfo, "Selected", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(11));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            Validate_ProtocolName();
            Delay.Milliseconds(0);
            
            CloseAnalysis();
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
