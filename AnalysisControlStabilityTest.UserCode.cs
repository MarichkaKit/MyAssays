///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class AnalysisControlStabilityTest
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        

        public void LaunchChartViewer(string xmlFileName)
        {
        	String xmlPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ChartViewer", "XML", xmlFileName);
        	String testChartViewerFolder = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ChartViewer");
        	String filePath = Path.Combine(testChartViewerFolder, "TestChartViewer.exe");
        	Host.Local.RunApplication(filePath, "\"" + xmlPath + "\"", testChartViewerFolder, false);
        	repo.TestChartViewWindow.PARTMainGridInfo.WaitForExists(TimeSpan.FromSeconds(15));
        	Delay.Seconds(2);
        }

        public void CheckControlImage(String imageName)
        {
        	Imaging.FindOptions fOpt = new Imaging.FindOptions();
        	fOpt.Similarity = 0.95;

        	var expectedBitmap = new Bitmap(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ChartViewer", "Images", imageName));
        	Validate.ContainsImage(repo.TestChartViewWindow.PARTMainGridInfo,
        	        expectedBitmap               ,
        	 		fOpt,
        	 		String.Format("Validate chart {0} matches with expected result", imageName));
        }

        public void SaveBitmapPattern(String name)
        {
        	Bitmap snapshot = repo.TestChartViewWindow.PARTMainGrid.CaptureCompressedImage();
        	snapshot.Save(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ChartViewer", "Images", name));
        }

        public void ValidateChartForAllXMLs()
        {
        	var xmlFolder = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ChartViewer", "XML");
        	var files = Directory.GetFiles(xmlFolder);
        	
        	foreach(var file in files)
        	{
        		LaunchChartViewer(file);
        		String name = file.Split('\\')[file.Split('\\').Length - 1];
        		//SaveBitmapPattern(name.Replace("xml", "png"));
        		CheckControlImage(name.Replace("xml", "png"));
        		
        		KillProcessHelper.KillProcess("TestChartViewer");
        	}
        }
  

    }
}