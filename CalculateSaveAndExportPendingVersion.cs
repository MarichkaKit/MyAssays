///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CalculateSaveAndExportPendingVersion recording.
    /// </summary>
    [TestModule("901c4aaf-e6da-45d0-ac23-b1a0c57a1424", ModuleType.Recording, 1)]
    public partial class CalculateSaveAndExportPendingVersion : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static CalculateSaveAndExportPendingVersion instance = new CalculateSaveAndExportPendingVersion();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CalculateSaveAndExportPendingVersion()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CalculateSaveAndExportPendingVersion Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            CleanHelper();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.CalculateButton' at Center.", repo.ProtocolAnalysisDesktop.CalculateButtonInfo, new RecordItemIndex(1));
            repo.ProtocolAnalysisDesktop.CalculateButton.Click();
            Delay.Milliseconds(200);
            
            WaitForCalculation();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.HomeListItem' at Center.", repo.ResultsAnalysis.HomeListItemInfo, new RecordItemIndex(3));
            repo.ResultsAnalysis.HomeListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(4));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(5));
            Delay.Duration(10000, false);
            
            UpdatePad("A1 10000");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.CalculateBttn' at Center.", repo.ResultsAnalysis.CalculateBttnInfo, new RecordItemIndex(7));
            repo.ResultsAnalysis.CalculateBttn.Click();
            Delay.Milliseconds(200);
            
            WaitForCalculation();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(9));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(10));
            Delay.Duration(10000, false);
            
            UpdatePad("A1 2");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Version 3 (pending)') on item 'ResultsAnalysis.VersionDropdownText'.", repo.ResultsAnalysis.VersionDropdownTextInfo, new RecordItemIndex(12));
                Validate.Attribute(repo.ResultsAnalysis.VersionDropdownTextInfo, "Text", "Version 3 (pending)", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            SavingResults();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.HomeListItem' at Center.", repo.ResultsAnalysis.HomeListItemInfo, new RecordItemIndex(14));
            repo.ResultsAnalysis.HomeListItem.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.ExportButton' at Center.", repo.ResultsAnalysis.ExportButtonInfo, new RecordItemIndex(15));
            repo.ResultsAnalysis.ExportButton.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(16));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(17));
            Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'There are changes to the settings that have not yet been calculated. Do you want to calculate these results now?') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(18));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("There are changes to the settings that have not yet been calculated. Do you want to calculate these results now?")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'Press Yes to calculate the results and export the newest results.') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(19));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("Press Yes to calculate the results and export the newest results.")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'Press No to export the last calculated results(version 2).') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(20));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("Press No to export the last calculated results(version 2).")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizardFailedForm.ButtonNo' at Center.", repo.ImportWizardFailedForm.ButtonNoInfo, new RecordItemIndex(21));
            repo.ImportWizardFailedForm.ButtonNo.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(22));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Complete.CustomXML' at Center.", repo.ExportWizard.Complete.CustomXMLInfo, new RecordItemIndex(23));
            repo.ExportWizard.Complete.CustomXML.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(24));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(25));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.XML' at Center.", repo.ExportWizard.XMLInfo, new RecordItemIndex(26));
            repo.ExportWizard.XML.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(27));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Complete.DefaultRadioButton' at Center.", repo.ExportWizard.Complete.DefaultRadioButtonInfo, new RecordItemIndex(28));
            repo.ExportWizard.Complete.DefaultRadioButton.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(29));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'False' on item 'ExportWizard.Complete.ConfigureProtocolToAutoExport'.", repo.ExportWizard.Complete.ConfigureProtocolToAutoExportInfo, new RecordItemIndex(30));
            repo.ExportWizard.Complete.ConfigureProtocolToAutoExport.Element.SetAttributeValue("Checked", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'False' on item 'ExportWizard.Complete.OpenWithDefaultViewer'.", repo.ExportWizard.Complete.OpenWithDefaultViewerInfo, new RecordItemIndex(31));
            repo.ExportWizard.Complete.OpenWithDefaultViewer.Element.SetAttributeValue("Checked", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Finish' at Center.", repo.ExportWizard.FinishInfo, new RecordItemIndex(32));
            repo.ExportWizard.Finish.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(33));
            Delay.Duration(5000, false);
            
            CompareExportedFile("Matrix Transform Kinetics 12x8 (1)", "2");
            Delay.Milliseconds(0);
            
            DeleteReports();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.ExportButton' at Center.", repo.ResultsAnalysis.ExportButtonInfo, new RecordItemIndex(36));
            repo.ResultsAnalysis.ExportButton.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(37));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(38));
            Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'There are changes to the settings that have not yet been calculated. Do you want to calculate these results now?') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(39));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("There are changes to the settings that have not yet been calculated. Do you want to calculate these results now?")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(39)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'Press Yes to calculate the results and export the newest results.') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(40));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("Press Yes to calculate the results and export the newest results.")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'Press No to export the last calculated results(version 2).') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(41));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", new Regex(Regex.Escape("Press No to export the last calculated results(version 2).")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(41)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizardFailedForm.ButtonYes' at Center.", repo.ImportWizardFailedForm.ButtonYesInfo, new RecordItemIndex(42));
            repo.ImportWizardFailedForm.ButtonYes.Click();
            Delay.Milliseconds(200);
            
            WaitForCalculation();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(44));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Complete.CustomXML' at Center.", repo.ExportWizard.Complete.CustomXMLInfo, new RecordItemIndex(45));
            repo.ExportWizard.Complete.CustomXML.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(46));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(47));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.XML' at Center.", repo.ExportWizard.XMLInfo, new RecordItemIndex(48));
            repo.ExportWizard.XML.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(49));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Complete.DefaultRadioButton' at Center.", repo.ExportWizard.Complete.DefaultRadioButtonInfo, new RecordItemIndex(50));
            repo.ExportWizard.Complete.DefaultRadioButton.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Next' at Center.", repo.ExportWizard.NextInfo, new RecordItemIndex(51));
            repo.ExportWizard.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'False' on item 'ExportWizard.Complete.ConfigureProtocolToAutoExport'.", repo.ExportWizard.Complete.ConfigureProtocolToAutoExportInfo, new RecordItemIndex(52));
            repo.ExportWizard.Complete.ConfigureProtocolToAutoExport.Element.SetAttributeValue("Checked", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'False' on item 'ExportWizard.Complete.OpenWithDefaultViewer'.", repo.ExportWizard.Complete.OpenWithDefaultViewerInfo, new RecordItemIndex(53));
            repo.ExportWizard.Complete.OpenWithDefaultViewer.Element.SetAttributeValue("Checked", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExportWizard.Finish' at Center.", repo.ExportWizard.FinishInfo, new RecordItemIndex(54));
            repo.ExportWizard.Finish.Click();
            Delay.Milliseconds(200);
            
            SavingResults();
            Delay.Milliseconds(0);
            
            CompareExportedFile("Matrix Transform Kinetics 12x8 (1)", "3");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
