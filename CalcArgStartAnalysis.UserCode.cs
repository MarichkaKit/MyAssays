///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class CalcArgStartAnalysis
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
        }

        public void StartAnalysis()
        {
        	StartAnalysisWithArg(" /calc");
        }
        
        public static void StartAnalysisWithArg(string param = "")
        {
        	var file = StartAnalysisHelper.GetExecutingAssemblyPath() + "\\input.txt";
        	
        	var arg =  " \"/import-raw:" + file + "\"" + param;
        	Report.Info(String.Format("Validating Exists on file '{0}'. {1}.", file, File.Exists(file)));
        	StartAnalysisHelper.StartAnalysis(arg);
        }

        public void CloseAnalysis()
        {
            KillProcessHelper.KillProcess("MyAssays.Desktop.Analysis");
        }

        public void Validate_ProtocolName()
        {
        	var text = repo.ResultsAnalysis.PadText;

        	var defText = File.ReadAllText(StartAnalysisHelper.GetExecutingAssemblyPath() + "\\input.txt");
        	var defValues = GridInteractionHelper.ConvertStringToDoubleList(defText);
        	var curValues = GridInteractionHelper.ConvertStringToDoubleList(text.TextValue);
        	 
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual on item 'ResultsAnalysis.ProtocolName'.");
            var areEqual = defValues.SequenceEqual(curValues);
            Validate.AreEqual(areEqual, true);
            Delay.Milliseconds(100);
        }

        public void Validate_ResultsAnalysis()
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis'.", repo.ResultsAnalysis.SelfInfo);
            if (!repo.ResultsAnalysis.SelfInfo.Exists())
            	Validate.Exists(repo.ResultsAnalysis.SelfInfo);
        }

        public void IsReportTabExist()
        {
        	if(HelperConstants.isReportTabExists)
        	{
        		repo.ResultsAnalysis.ReportTab.Click();
        	}
        }

    }
}