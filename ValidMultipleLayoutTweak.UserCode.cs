///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;
using System.Reflection;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class ValidMultipleLayoutTweak
    {
        private string _myAssaysPath;
        
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            _myAssaysPath = StartAnalysisHelper.MadFolderPath;
        }

        public void TypeTweakPath(string tweakName)
        {
        	var tweakPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "Tweaks", tweakName);
        	
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysAnalysisLauncher.SomeContainer.SomeElement' at 46;11.", repo.MyAssaysAnalysisLauncher.SomeContainer.SomeElementInfo, new RecordItemIndex(4));
            repo.MyAssaysAnalysisLauncher.SomeContainer.SomeElement.Click("46;11");
            
            Report.Log(ReportLevel.Info, "Keyboard", String.Format("Type tweak path: {0}", tweakPath));
            Keyboard.Press(tweakPath);
        }

        public void TypeProtocolPath(string protocolName)
        {
        	var protocolPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "Protocols", protocolName);
        	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysAnalysisLauncher.SomeElement' at 67;7.", repo.MyAssaysAnalysisLauncher.ProtocolPathInputInfo, new RecordItemIndex(23));
            repo.MyAssaysAnalysisLauncher.ProtocolPathInput.Click("67;7");
            
            Report.Log(ReportLevel.Info, "Keyboard", String.Format("Type protocol path: {0}", protocolPath));
            Keyboard.Press(protocolPath);
        }

        public void StartLauncher()
        {
        	Report.Log(ReportLevel.Info, "Application", String.Format("Run application '{0}\\MyAssays.Desktop.Analysis.Launcher.exe' with arguments '' in normal mode.", _myAssaysPath));
            Host.Local.RunApplication(_myAssaysPath + "\\MyAssays.Desktop.Analysis.Launcher.exe", "", _myAssaysPath, false);
        }

        public void CheckLayoutColors(string sampleTypesList)
        {
        	MeasurementsHelper helper = new MeasurementsHelper();
        	var plateValues = helper.GetPlateColors(repo.ProtocolAnalysisDesktop.PlateControlRslts);
        	
        	Report.Screenshot();
        	
        	var sampleIdsArray = sampleTypesList.Split(',');
        	for (int i = 0; i < sampleIdsArray.Length; i++)
        	{
        		var sampleId = Convert.ToInt16(sampleIdsArray[i]);
        		if(sampleId == 1)
        			Validate.AreEqual(plateValues[i].ToArgb(), Color.White.ToArgb(), "Validate sample is white");
        		else if(sampleId == 2)
        			Validate.AreEqual(plateValues[i].ToArgb(), Color.Red.ToArgb(), "Validate sample is red");
        		else if(sampleId == 3)
        			Validate.AreEqual(plateValues[i].ToArgb(), Color.Yellow.ToArgb(), "Validate sample is yellow");
        		else if(sampleId == 4)
        			Validate.AreEqual(plateValues[i].ToArgb(), Color.Aqua.ToArgb(), "Validate sample is aqua");
        		else if(sampleId == 5)
        			Validate.AreEqual(plateValues[i].ToArgb(), Color.Lime.ToArgb(), "Validate sample is lime");
        		else
        			Report.Failure("Wrong sample id parameter");
        	}
        	
        	for(int i = 0; i < plateValues.Count; i++)
        	{
        		var color = plateValues[i].ToArgb();
        	}
        }

    }
}