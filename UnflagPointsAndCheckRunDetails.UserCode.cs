///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Linq;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using WinForms = System.Windows.Forms;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class UnflagPointsAndCheckRunDetails
    {
    	Dictionary<System.Windows.Point,Tuple<System.Windows.Point,Boolean>> points;
    	
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidatePointFlagState(bool expectedState, string pointX, string pointY)
        {
        	InitializeFlaggablePointsDictionary();
        	var pointValue = points[new System.Windows.Point(Convert.ToDouble(pointX), Convert.ToDouble(pointY))];
        	Validate.AreEqual(pointValue.Item2, expectedState, String.Format("Validate point flag state is {0}", expectedState));
        }

        public void ToggleFlagPoint(string pointX, string pointY)
        {
        	InitializeFlaggablePointsDictionary();
        	var pointValue = points[new System.Windows.Point(Convert.ToDouble(pointX), Convert.ToDouble(pointY))];

        	repo.ResultsAnalysis.ChartTopPanel.SelectedTab.Find<Ranorex.WpfElement>(".//element[@automationid='SciChartSurface']/container[@automationid='PART_MainGrid']/element[@automationid='PART_GridLinesArea']")[0].Click(new Location(((int)pointValue.Item1.X), ((int)pointValue.Item1.Y)));
        	Delay.Seconds(3);
        }

        public void CheckassayRunDetails()
        {
        	var tempFolder = Path.Combine(Path.GetTempPath(), "MyAssaysDesktop");
        	var guildDir = new DirectoryInfo(tempFolder).GetDirectories()
                       .OrderByDescending(d => d.LastWriteTimeUtc).First();
        	
        	var runDetailsContent = File.ReadAllText(Path.Combine(guildDir.FullName, "CVF", "default.assayRunDetails.xml"));
        	
        	Validate.IsTrue(runDetailsContent.Contains("<Position PosId=\"1\" Points=\"3\" />"), "Validate default.assayRunDetails.xml contains flagged point 3");
        }
        
        public void InitializeFlaggablePointsDictionary()
        {
        	points = ((Dictionary<System.Windows.Point,Tuple<System.Windows.Point,Boolean>>)repo.ResultsAnalysis.ChartTopPanel.SelectedTab.Find<Ranorex.WpfElement>("./container[@type='AnalysisControl']")[0].Element.GetAttributeValue("FlaggablePoints"));		
        }

    }
}