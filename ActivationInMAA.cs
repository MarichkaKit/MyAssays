///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ActivationInMAA recording.
    /// </summary>
    [TestModule("bdda2af0-8e26-413d-9e81-bdb67b626cb9", ModuleType.Recording, 1)]
    public partial class ActivationInMAA : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static ActivationInMAA instance = new ActivationInMAA();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ActivationInMAA()
        {
            protocolName = "";
            email = "";
            serial = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ActivationInMAA Instance
        {
            get { return instance; }
        }

#region Variables

        string _protocolName;

        /// <summary>
        /// Gets or sets the value of variable protocolName.
        /// </summary>
        [TestVariable("f72469e5-278c-46df-a18a-6f2847d496cf")]
        public string protocolName
        {
            get { return _protocolName; }
            set { _protocolName = value; }
        }

        string _email;

        /// <summary>
        /// Gets or sets the value of variable email.
        /// </summary>
        [TestVariable("138666c4-f1e8-491d-9579-184392139b48")]
        public string email
        {
            get { return _email; }
            set { _email = value; }
        }

        string _serial;

        /// <summary>
        /// Gets or sets the value of variable serial.
        /// </summary>
        [TestVariable("cc2fff21-1dc0-4b1b-9e1d-3c1a3426c26c")]
        public string serial
        {
            get { return _serial; }
            set { _serial = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            RunAnalysis();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysDesktopLicenseActivationDeactivation'.", repo.MyAssaysDesktopLicenseActivationDeactivation.SelfInfo, new RecordItemIndex(1));
            Validate.Attribute(repo.MyAssaysDesktopLicenseActivationDeactivation.SelfInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysDesktopLicenseActivationDeactivation.Close' at 18;14.", repo.MyAssaysDesktopLicenseActivationDeactivation.CloseInfo, new RecordItemIndex(2));
            repo.MyAssaysDesktopLicenseActivationDeactivation.Close.Click("18;14");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Activation process was not successful. The application will be closed.') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(3));
            Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", "Activation process was not successful. The application will be closed.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizardFailedForm.ButtonOK' at 31;9.", repo.ImportWizardFailedForm.ButtonOKInfo, new RecordItemIndex(4));
            repo.ImportWizardFailedForm.ButtonOK.Click("31;9");
            Delay.Milliseconds(200);
            
            ValidateMAAVisibilityState(ValueConverter.ArgumentFromString<bool>("expectedState", "False"));
            Delay.Milliseconds(0);
            
            RunAnalysis();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Next' at Center.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.NextInfo, new RecordItemIndex(7));
            repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$serial' with focus on 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SerialTextBox'.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SerialTextBoxInfo, new RecordItemIndex(8));
            repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SerialTextBox.PressKeys(serial);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$email' with focus on 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SomeText'.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SomeTextInfo, new RecordItemIndex(9));
            repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.SomeText.PressKeys(email);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Next1' at Center.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Next1Info, new RecordItemIndex(10));
            repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Next1.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'You have successfully activated the application.') on item 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.YouHaveSuccessfullyActivatedTheAppl'.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.YouHaveSuccessfullyActivatedTheApplInfo, new RecordItemIndex(11));
            Validate.Attribute(repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.YouHaveSuccessfullyActivatedTheApplInfo, "Text", new Regex(Regex.Escape("You have successfully activated the application.")));
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Close' at Center.", repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.CloseInfo, new RecordItemIndex(12));
            repo.MyAssaysDesktopLicenseActivationDeactivation.SomeContainer4.Close.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 25s.", new RecordItemIndex(13));
            Delay.Duration(25000, false);
            
            ValidateMAAVisibilityState(ValueConverter.ArgumentFromString<bool>("expectedState", "True"));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
