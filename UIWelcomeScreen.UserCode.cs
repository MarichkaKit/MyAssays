///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class UIWelcomeScreen
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void checkSectionTitle(Adapter adapter, int index, string expectedLink)
        {
        	string actualLink = adapter.Children[index].Element.GetAttributeValueText("Text");
        	if (adapter.Visible)
        	{
	        	if(actualLink.Equals(expectedLink))
	        		Report.Success("Element corresponds to demand.");
	        	else
	        	{
	        		Report.Error(String.Format("Element does not correspond to demand.\r\nExpected value: {0}\r\n Actual value: {1}", expectedLink, actualLink));
	        	}
        	}
        	else Report.Failure("Discover section is not visible.");
        }

        public void checkSectionContent(Adapter adapter, int index, string expectedLink)
        {
        	string actualLink = adapter.Children[index].Children[0].Children[0].Element.GetAttributeValueText("Text");
        	if (adapter.Children[index].Visible)
        	{
        		if(actualLink.Equals(expectedLink))
	        	{
	        		Report.Info(String.Format("Link {0} is visible.", expectedLink));
	        		Report.Success("Element corresponds to demand.");
	        	}
	        	else
	        	{
	        		Report.Info(String.Format("Link {0} is visible.", expectedLink));
	        		Report.Error(String.Format("Element does not correspond to demand.\r\nExpected value: {0}\r\n Actual value: {1}", expectedLink, actualLink));
	        	}
        	}
        	else Report.Failure("Link is not visible.");
        }
        
        public void checkURL(Adapter adapter, int index, string expectedAddress)
        {
        	string urlString = adapter.Children[index].Children[0].Element.GetAttributeValueText("NavigateUri");
        	
        	if (adapter.Children[index].Visible)
        	{        		
        		if(urlString.Equals(expectedAddress))
        		   Report.Success("Link has correct URL.");
        		else
        			Report.Failure("Link has not correct URL.");           		
        	}
        	else Report.Failure("I cannot get a URL because link is not visible.");
        }
        
        public void goToLink(Adapter adapter, int index, string expectedAddress)
        {
        	Report.Screenshot();
        	if (adapter.Children[index].Visible)
        	{
        		adapter.Children[index].Click();
        		Delay.Seconds(10);
        		Report.Screenshot();
        		string actualAddress = repo.MyAssaysDesktopMyAssaysInternetE.Address.TextValue;
        		if(actualAddress.Equals(expectedAddress))
        		   Report.Success("Link works correctly.");
        		else
        			Report.Failure("Link does not work correctly.");   
        		KillProcessHelper.KillProcess("iexplore");
        		Delay.Seconds(2);
        	}
        	else Report.Failure("Link is not visible.");
        }

    }
}