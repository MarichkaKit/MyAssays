///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The BSA_Information recording.
    /// </summary>
    [TestModule("27d9a198-b8d2-486d-a4ef-6a1b6fe20a8a", ModuleType.Recording, 1)]
    public partial class BSA_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static BSA_Information instance = new BSA_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public BSA_Information()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static BSA_Information Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysExplorer.Ribbon' at 20;35.", repo.MyAssaysExplorer.RibbonInfo, new RecordItemIndex(0));
            repo.MyAssaysExplorer.Ribbon.Click("20;35");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysExplorer.BackStage.Information' at Center.", repo.MyAssaysExplorer.BackStage.InformationInfo, new RecordItemIndex(1));
            repo.MyAssaysExplorer.BackStage.Information.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.Information1'.", repo.MyAssaysExplorer.BackStage.Information1Info, new RecordItemIndex(2));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.Information1Info, "Visible", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Information') on item 'MyAssaysExplorer.BackStage.Information1'.", repo.MyAssaysExplorer.BackStage.Information1Info, new RecordItemIndex(3));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.Information1Info, "Text", "Information");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ProductVersionLabel'.", repo.MyAssaysExplorer.BackStage.ProductVersionLabelInfo, new RecordItemIndex(4));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ProductVersionLabelInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Product version:') on item 'MyAssaysExplorer.BackStage.ProductVersionLabel'.", repo.MyAssaysExplorer.BackStage.ProductVersionLabelInfo, new RecordItemIndex(5));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ProductVersionLabelInfo, "Text", "Product version:");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ProductVersion'.", repo.MyAssaysExplorer.BackStage.ProductVersionInfo, new RecordItemIndex(6));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ProductVersionInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ThisProductIsLicensedTo'.", repo.MyAssaysExplorer.BackStage.ThisProductIsLicensedToInfo, new RecordItemIndex(7));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ThisProductIsLicensedToInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='This product is licensed to:') on item 'MyAssaysExplorer.BackStage.ThisProductIsLicensedTo'.", repo.MyAssaysExplorer.BackStage.ThisProductIsLicensedToInfo, new RecordItemIndex(8));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ThisProductIsLicensedToInfo, "Text", "This product is licensed to:");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'@') on item 'MyAssaysExplorer.BackStage.mail'.", repo.MyAssaysExplorer.BackStage.mailInfo, new RecordItemIndex(9));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.mailInfo, "Text", new Regex(Regex.Escape("@")));
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>'.') on item 'MyAssaysExplorer.BackStage.mail'.", repo.MyAssaysExplorer.BackStage.mailInfo, new RecordItemIndex(10));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.mailInfo, "Text", new Regex(Regex.Escape(".")));
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ProductRegistrationName'.", repo.MyAssaysExplorer.BackStage.ProductRegistrationNameInfo, new RecordItemIndex(11));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ProductRegistrationNameInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Product registration name:') on item 'MyAssaysExplorer.BackStage.ProductRegistrationName'.", repo.MyAssaysExplorer.BackStage.ProductRegistrationNameInfo, new RecordItemIndex(12));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ProductRegistrationNameInfo, "Text", "Product registration name:");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.MyAssaysDesktop'.", repo.MyAssaysExplorer.BackStage.MyAssaysDesktopInfo, new RecordItemIndex(13));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.MyAssaysDesktopInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='MyAssays Desktop') on item 'MyAssaysExplorer.BackStage.MyAssaysDesktop'.", repo.MyAssaysExplorer.BackStage.MyAssaysDesktopInfo, new RecordItemIndex(14));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.MyAssaysDesktopInfo, "Text", "MyAssays Desktop");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.LicenseActivated'.", repo.MyAssaysExplorer.BackStage.LicenseActivatedInfo, new RecordItemIndex(15));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.LicenseActivatedInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='License activated:') on item 'MyAssaysExplorer.BackStage.LicenseActivated'.", repo.MyAssaysExplorer.BackStage.LicenseActivatedInfo, new RecordItemIndex(16));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.LicenseActivatedInfo, "Text", "License activated:");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.LicenseActivatedDate'.", repo.MyAssaysExplorer.BackStage.LicenseActivatedDateInfo, new RecordItemIndex(17));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.LicenseActivatedDateInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.LicensedFeatures'.", repo.MyAssaysExplorer.BackStage.LicensedFeaturesInfo, new RecordItemIndex(18));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.LicensedFeaturesInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Licensed Features:') on item 'MyAssaysExplorer.BackStage.LicensedFeatures'.", repo.MyAssaysExplorer.BackStage.LicensedFeaturesInfo, new RecordItemIndex(19));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.LicensedFeaturesInfo, "Text", "Licensed Features:");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.PLAEnabledPicture'.", repo.MyAssaysExplorer.BackStage.PLAEnabledPictureInfo, new RecordItemIndex(20));
            //Validate.Attribute(repo.MyAssaysExplorer.BackStage.PLAEnabledPictureInfo, "Visible", "True");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ActivateNewLicense'.", repo.MyAssaysExplorer.BackStage.ActivateNewLicenseInfo, new RecordItemIndex(21));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ActivateNewLicenseInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Activate New License') on item 'MyAssaysExplorer.BackStage.ActivateNewLicense'.", repo.MyAssaysExplorer.BackStage.ActivateNewLicenseInfo, new RecordItemIndex(22));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ActivateNewLicenseInfo, "Text", "Activate New License");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionality'.", repo.MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionalityInfo, new RecordItemIndex(23));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionalityInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Add new features or extend functionality by activating a new license.') on item 'MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionality'.", repo.MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionalityInfo, new RecordItemIndex(24));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.AddNewFeaturesOrExtendFunctionalityInfo, "Text", "Add new features or extend functionality by activating a new license.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'MyAssaysExplorer.BackStage.ActivateNewLicenseBttn'.", repo.MyAssaysExplorer.BackStage.ActivateNewLicenseBttnInfo, new RecordItemIndex(25));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ActivateNewLicenseBttnInfo, "Enabled", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ActivateNewLicenseBttn'.", repo.MyAssaysExplorer.BackStage.ActivateNewLicenseBttnInfo, new RecordItemIndex(26));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ActivateNewLicenseBttnInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.UpdateExistingLicense'.", repo.MyAssaysExplorer.BackStage.UpdateExistingLicenseInfo, new RecordItemIndex(27));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.UpdateExistingLicenseInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Update Existing License') on item 'MyAssaysExplorer.BackStage.UpdateExistingLicense'.", repo.MyAssaysExplorer.BackStage.UpdateExistingLicenseInfo, new RecordItemIndex(28));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.UpdateExistingLicenseInfo, "Text", "Update Existing License");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLice'.", repo.MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLiceInfo, new RecordItemIndex(29));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLiceInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Apply any available updates to your license.') on item 'MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLice'.", repo.MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLiceInfo, new RecordItemIndex(30));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.ApplyAnyAvailableUpdatesToYourLiceInfo, "Text", "Apply any available updates to your license.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'MyAssaysExplorer.BackStage.UpdateLicenseBttn'.", repo.MyAssaysExplorer.BackStage.UpdateLicenseBttnInfo, new RecordItemIndex(31));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.UpdateLicenseBttnInfo, "Enabled", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Valid='True') on item 'MyAssaysExplorer.BackStage.UpdateLicenseBttn'.", repo.MyAssaysExplorer.BackStage.UpdateLicenseBttnInfo, new RecordItemIndex(32));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.UpdateLicenseBttnInfo, "Valid", "True");
            Delay.Milliseconds(100);
            
            Set_Value_InformationVerticalScroll();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.DeactivateLicense'.", repo.MyAssaysExplorer.BackStage.DeactivateLicenseInfo, new RecordItemIndex(34));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateLicenseInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Deactivate License') on item 'MyAssaysExplorer.BackStage.DeactivateLicense'.", repo.MyAssaysExplorer.BackStage.DeactivateLicenseInfo, new RecordItemIndex(35));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateLicenseInfo, "Text", "Deactivate License");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoTh'.", repo.MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoThInfo, new RecordItemIndex(36));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoThInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Deactivate your license on this PC so that you can transfer it to another PC.') on item 'MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoTh'.", repo.MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoThInfo, new RecordItemIndex(37));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateYourLicenseOnThisPCSoThInfo, "Text", "Deactivate your license on this PC so that you can transfer it to another PC.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'MyAssaysExplorer.BackStage.DeactivateLicenseBttn'.", repo.MyAssaysExplorer.BackStage.DeactivateLicenseBttnInfo, new RecordItemIndex(38));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateLicenseBttnInfo, "Enabled", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'MyAssaysExplorer.BackStage.DeactivateLicenseBttn'.", repo.MyAssaysExplorer.BackStage.DeactivateLicenseBttnInfo, new RecordItemIndex(39));
            Validate.Attribute(repo.MyAssaysExplorer.BackStage.DeactivateLicenseBttnInfo, "Visible", "True");
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
