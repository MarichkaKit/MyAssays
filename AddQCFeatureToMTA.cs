///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AddQCFeatureToMTA recording.
    /// </summary>
    [TestModule("ffacc26f-ac2a-4831-847f-f967ad1beb40", ModuleType.Recording, 1)]
    public partial class AddQCFeatureToMTA : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static AddQCFeatureToMTA instance = new AddQCFeatureToMTA();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AddQCFeatureToMTA()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AddQCFeatureToMTA Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            CleanHelper();
            Delay.Milliseconds(0);
            
            RunProtocolFile("Matrix Transform Kinetics 12x8.assay-protocol");
            Delay.Milliseconds(0);
            
            ResolveSavingProtocol();
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'ProtocolAnalysisDesktop.QualityControlAddRibbonButton'.", repo.ProtocolAnalysisDesktop.QualityControlAddRibbonButtonInfo, new RecordItemIndex(3));
                Validate.Attribute(repo.ProtocolAnalysisDesktop.QualityControlAddRibbonButtonInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='False') on item 'ProtocolAnalysisDesktop.EditQC'.", repo.ProtocolAnalysisDesktop.EditQCInfo, new RecordItemIndex(4));
                Validate.Attribute(repo.ProtocolAnalysisDesktop.EditQCInfo, "Visible", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='False') on item 'ProtocolAnalysisDesktop.RemoveQC'.", repo.ProtocolAnalysisDesktop.RemoveQCInfo, new RecordItemIndex(5));
                Validate.Attribute(repo.ProtocolAnalysisDesktop.RemoveQCInfo, "Visible", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.QualityControlAddRibbonButton' at Center.", repo.ProtocolAnalysisDesktop.QualityControlAddRibbonButtonInfo, new RecordItemIndex(6));
            repo.ProtocolAnalysisDesktop.QualityControlAddRibbonButton.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'MyAssaysDesktopAnalysis.NewConfiguration' at Center.", repo.MyAssaysDesktopAnalysis.NewConfigurationInfo, new RecordItemIndex(7));
            repo.MyAssaysDesktopAnalysis.NewConfiguration.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(8));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.FolderCheckBox' at Center.", repo.QualityControlWizardMADA.FolderCheckBoxInfo, new RecordItemIndex(9));
            repo.QualityControlWizardMADA.FolderCheckBox.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'Documents\\MyAssays\\Results') on item 'QualityControlWizardMADA.FilePath'.", repo.QualityControlWizardMADA.FilePathInfo, new RecordItemIndex(10));
                Validate.Attribute(repo.QualityControlWizardMADA.FilePathInfo, "Text", new Regex(Regex.Escape("Documents\\MyAssays\\Results")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Matrix Transform Kinetics 12x8*') on item 'QualityControlWizardMADA.PatternField'.", repo.QualityControlWizardMADA.PatternFieldInfo, new RecordItemIndex(11));
                Validate.Attribute(repo.QualityControlWizardMADA.PatternFieldInfo, "Text", "Matrix Transform Kinetics 12x8*", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.Next' at Center.", repo.QualityControlWizardMADA.NextInfo, new RecordItemIndex(12));
            repo.QualityControlWizardMADA.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(13));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.Next' at Center.", repo.QualityControlWizardMADA.NextInfo, new RecordItemIndex(14));
            repo.QualityControlWizardMADA.Next.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(15));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Please provide valid data for each of the specified observations.') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(16));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", "Please provide valid data for each of the specified observations.", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizardFailedForm.ButtonOK' at Center.", repo.ImportWizardFailedForm.ButtonOKInfo, new RecordItemIndex(17));
            repo.ImportWizardFailedForm.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.CreateNow' at Center.", repo.QualityControlWizardMADA.CreateNowInfo, new RecordItemIndex(18));
            repo.QualityControlWizardMADA.CreateNow.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(19));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Please provide valid data for each of the specified observations.') on item 'ImportWizardFailedForm.FailedToApply'.", repo.ImportWizardFailedForm.FailedToApplyInfo, new RecordItemIndex(20));
                Validate.Attribute(repo.ImportWizardFailedForm.FailedToApplyInfo, "Text", "Please provide valid data for each of the specified observations.", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizardFailedForm.ButtonOK' at Center.", repo.ImportWizardFailedForm.ButtonOKInfo, new RecordItemIndex(21));
            repo.ImportWizardFailedForm.ButtonOK.Click();
            Delay.Milliseconds(200);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'QualityControlWizardMADA.Observation'.", repo.QualityControlWizardMADA.ObservationInfo, new RecordItemIndex(22));
                Validate.Attribute(repo.QualityControlWizardMADA.ObservationInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            InputObservation("/Report/GroupTable[@Id=\"Results\"]/Row[1]/Col[4]/Rep", repo.QualityControlWizardMADA.XPathFieldFirst);
            Delay.Milliseconds(0);
            
            InputLimit("1", repo.QualityControlWizardMADA.LimitFirst);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.CreateNow' at Center.", repo.QualityControlWizardMADA.CreateNowInfo, new RecordItemIndex(25));
            repo.QualityControlWizardMADA.CreateNow.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(26));
            Delay.Duration(10000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating Exists on item 'ExcelReport'.", repo.ExcelReport.SelfInfo, new RecordItemIndex(27));
                Validate.Exists(repo.ExcelReport.SelfInfo, Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ExcelReport' at Center.", repo.ExcelReport.SelfInfo, new RecordItemIndex(28));
            repo.ExcelReport.Self.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Alt+F4' Press.", new RecordItemIndex(29));
            Keyboard.Press(System.Windows.Forms.Keys.F4 | System.Windows.Forms.Keys.Alt, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            CheckReports(ValueConverter.ArgumentFromString<int>("expectedCount", "1"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.Next' at Center.", repo.QualityControlWizardMADA.NextInfo, new RecordItemIndex(31));
            repo.QualityControlWizardMADA.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'True' on item 'QualityControlWizardMADA.AddQCContentToReport'.", repo.QualityControlWizardMADA.AddQCContentToReportInfo, new RecordItemIndex(32));
            repo.QualityControlWizardMADA.AddQCContentToReport.Element.SetAttributeValue("Checked", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'False' on item 'QualityControlWizardMADA.SaveToFileCheckBox'.", repo.QualityControlWizardMADA.SaveToFileCheckBoxInfo, new RecordItemIndex(33));
            repo.QualityControlWizardMADA.SaveToFileCheckBox.Element.SetAttributeValue("Checked", "False");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'QualityControlWizardMADA.Finish' at Center.", repo.QualityControlWizardMADA.FinishInfo, new RecordItemIndex(34));
            repo.QualityControlWizardMADA.Finish.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(35));
            Delay.Duration(10000, false);
            
            CheckQCs(ValueConverter.ArgumentFromString<int>("expectedCount", "0"));
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (Text>'*') on item 'ProtocolAnalysisDesktop.Rectangle'.", repo.ProtocolAnalysisDesktop.RectangleInfo, new RecordItemIndex(37));
                Validate.Attribute(repo.ProtocolAnalysisDesktop.RectangleInfo, "Text", new Regex(Regex.Escape("*")), Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ProtocolAnalysisDesktop.CalculateButton' at Center.", repo.ProtocolAnalysisDesktop.CalculateButtonInfo, new RecordItemIndex(38));
            repo.ProtocolAnalysisDesktop.CalculateButton.Click();
            Delay.Milliseconds(200);
            
            WaitForCalculation();
            Delay.Milliseconds(0);
            
            try {
                CheckQCInProtocol("Matrix Transform Kinetics 12x8.assay-protocol");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40)); }
            
            try {
                CheckReportXML("Matrix Transform Kinetics 12x8 (1).assay-results", "1", "MTAReportObservation.txt");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(41)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
