///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VersionChangedTemplate recording.
    /// </summary>
    [TestModule("d47fe53b-c3f1-4a6d-9c71-848adc0f803f", ModuleType.Recording, 1)]
    public partial class VersionChangedTemplate : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static VersionChangedTemplate instance = new VersionChangedTemplate();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VersionChangedTemplate()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VersionChangedTemplate Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            cleanHelper();
            Delay.Milliseconds(0);
            
            RunAnalysisResults("Liquid Handling QC (96 well) (1).assay-results");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(2));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            changeValue("1");
            Delay.Milliseconds(0);
            
            selectVersion("1", repo.ResultsAnalysis.Version1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(5));
            Delay.Duration(5000, false);
            
            saamMessageDisappears();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.ReportRibbonTab1' at Center.", repo.ResultsAnalysis.ReportRibbonTab1Info, new RecordItemIndex(7));
            repo.ResultsAnalysis.ReportRibbonTab1.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(8));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.EditTemplate' at Center.", repo.ResultsAnalysis.EditTemplateInfo, new RecordItemIndex(9));
            repo.ResultsAnalysis.EditTemplate.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.MeasurementsTab' at Center.", repo.ResultsAnalysis.MeasurementsTabInfo, new RecordItemIndex(10));
            repo.ResultsAnalysis.MeasurementsTab.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(11));
            Delay.Duration(5000, false);
            
            changeValue("2");
            Delay.Milliseconds(0);
            
            selectVersion("1", repo.ResultsAnalysis.Version1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(14));
            Delay.Duration(10000, false);
            
            checkSaamWarning();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke Action", "Invoking Focus() on item 'TemplateDocx'.", repo.TemplateDocx.SelfInfo, new RecordItemIndex(16));
            repo.TemplateDocx.Self.Focus();
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'TemplateDocx.CloseMSOffice' at Center.", repo.TemplateDocx.CloseMSOfficeInfo, new RecordItemIndex(17));
                repo.TemplateDocx.CloseMSOffice.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(18));
            Delay.Duration(5000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
