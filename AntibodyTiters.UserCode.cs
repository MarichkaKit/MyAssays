///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class AntibodyTiters
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void CheckSampleIDs()
        {
        	var cells = repo.ResultsAnalysis.StandConcParamTable;
        	CheckIDs(cells);
        }
		private void CheckIDs(Unknown seriesTable)
        {
        	var cells = (Dictionary<int, List<Tuple<string, bool, Color>>>)seriesTable.Element.GetAttributeValue("Cells");
			var leftCells = ParamTableHelper.GetCellsColor(cells);
			var status = true;
			for (var i=0; i<leftCells.Count && status; i++)
			{
				status = leftCells[i].Equals(Color.FromArgb(255, 0, 255, 0));
			}
			Validate.AreEqual(status, true);
			var leftCellsValue = ParamTableHelper.GetCellsStringValue(cells);
			status = true;
			for (var i=0; i<leftCellsValue.Count && status; i++)
			{
				status = leftCellsValue[i].Equals("Unknown"+ (i+1));
			}
			Validate.AreEqual(status, true);
			var leftCellsText = ParamTableHelper.GetLeftCellsText(cells);
			status = true;
			for (var i=0; i<leftCellsText.Count && status; i++)
			{
				var text = "Unknown"+(i+1);
				status = leftCellsText[i].Equals(text);
			}
			Validate.AreEqual(status, true);
        }
    }
}