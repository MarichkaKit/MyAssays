///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
// 
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

namespace MyAssays.Wizard.RanorexTests
{
    public partial class VersionChangedTemplate
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        
        private void Init(){}

        public void cleanHelper()
        {
        	CleanDataHelper.DeleteProtocols();
        	CleanDataHelper.DeleteResults();
        	CleanDataHelper.DeleteCustomLayouts();
        	Delay.Seconds(2);
        }

        public void addRslt(string name)
        {
        	HelperLoadFileToFolder.addToFolderResults(name, null, null);
        	Delay.Seconds(2);
        }

        public void selectRslts(string name)
        {
        	HelperSelectProtocolResult.SelectResultItem(name);
        	Delay.Seconds(15);
        }

        public void changeValue(string num)
        {
        	string data = repo.ResultsAnalysis.PadArea.TextValue;
        	data = data.Substring(0, data.Length - 1) + num;        	
        	repo.ResultsAnalysis.Clear.Click();
        	Delay.Seconds(1);
        	repo.ResultsAnalysis.PadArea.TextValue = data;
        	Report.Info("Pad value was changed to " + data);
        	Delay.Seconds(5);
        }

        public void selectVersion(string num, Adapter adpter)
        { 
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.HomeListItem' at Center.");
        	repo.ResultsAnalysis.HomeListItem.Click();
			Delay.Seconds(1);

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ResultsAnalysis.SomeCheckBox' at Center.");
			repo.ResultsAnalysis.SelectVersion.Click();
			Delay.Seconds(1);
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'adpter' at Center.");
			adpter.Click();
        	Delay.Seconds(5);
        	
        	if(repo.MyAssaysAnalysis.ButtonOKInfo.Exists())
         	{
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ButtonOK' at Center.");
         		repo.MyAssaysAnalysis.ButtonOK.Click(); 
         	} 	
        	Delay.Seconds(5);
        }

        public void saamMessageDisappears()
        {
        	Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (HasItems='False') on item 'ResultsAnalysis.SaamsListBox'.", repo.ResultsAnalysis.SaamsListBoxInfo);
            Validate.Attribute(repo.ResultsAnalysis.SaamsListBoxInfo, "HasItems", "False");
            Delay.Milliseconds(100);
        }

        public void checkSaamWarning()
        {
        	var saamWarning1 = repo.ResultsAnalysis.Saam1.Children[0].Element.GetAttributeValueText("Text").Replace(" ", "");
         	var saamWarning2 = repo.ResultsAnalysis.Saam1.Children[1].Children[0].Element.GetAttributeValueText("Text").Replace(" ", "");
         	var saamWarning3 = repo.ResultsAnalysis.Saam1.Children[2].Element.GetAttributeValueText("Text").Replace(" ", "");
         	
         	if (saamWarning1.Contains("TheTemplatefileisopeninanotherapplicationandcannotbechanged.PleaseclosetheapplicationeditingtheTemplatefileandthen") &&
	        	    saamWarning2.Contains("ResetTemplate") &&
	        	    saamWarning3.Contains(".(Otherwisethetemplatebeingeditedwillbeapplied.)"))
	        	{
	        		Report.Success("Saam Warning corresponds to demand.");
	        	}
	        	else 
	        	{
	        		Report.Error("Saam Warning does not correspond to demand.");
	        	}
        }

        public void RunAnalysisResults(string resultsName)
        {
        	StartAnalysisResultsHelper._results = resultsName;
            StartAnalysisResultsHelper.StartAnalysis();
            Delay.Seconds(HelperConstants.TIME_TO_OPEN_RESULTS);
        }

    }
}