///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VersionIsNotCompatibleFPManager recording.
    /// </summary>
    [TestModule("9490a8c6-9795-4943-b4dc-0adaaf470822", ModuleType.Recording, 1)]
    public partial class VersionIsNotCompatibleFPManager : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static VersionIsNotCompatibleFPManager instance = new VersionIsNotCompatibleFPManager();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VersionIsNotCompatibleFPManager()
        {
            assemblyName = "";
            extention = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VersionIsNotCompatibleFPManager Instance
        {
            get { return instance; }
        }

#region Variables

        string _assemblyName;

        /// <summary>
        /// Gets or sets the value of variable assemblyName.
        /// </summary>
        [TestVariable("b83353f1-5005-48bf-a1f7-d888d706a528")]
        public string assemblyName
        {
            get { return _assemblyName; }
            set { _assemblyName = value; }
        }

        string _extention;

        /// <summary>
        /// Gets or sets the value of variable extention.
        /// </summary>
        [TestVariable("9add4ba5-5546-4e0e-abdd-b07641121eb9")]
        public string extention
        {
            get { return _extention; }
            set { _extention = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            renameAssembly(ValueConverter.ArgumentFromString<bool>("invert", "False"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(1));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ImportWizard.SomeContainer.messageAnErlier'.", repo.ImportWizard.SomeContainer.messageAnErlierInfo, new RecordItemIndex(2));
            Validate.Attribute(repo.ImportWizard.SomeContainer.messageAnErlierInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            checkMessage(repo.ImportWizard.SomeContainer.messageAnErlier, "An earlier version of Folder Poll is currently installed. Please uninstall and install the latest version from http://www.myassays.com/folder-poll to continue.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Visible='True') on item 'ImportWizard.SomeContainer.AfterInstallingFolderPollPress'.", repo.ImportWizard.SomeContainer.AfterInstallingFolderPollPressInfo, new RecordItemIndex(4));
            Validate.Attribute(repo.ImportWizard.SomeContainer.AfterInstallingFolderPollPressInfo, "Visible", "True");
            Delay.Milliseconds(0);
            
            checkMessage(repo.ImportWizard.SomeContainer.AfterInstallingFolderPollPress, "After installing Folder Poll, press Back (button below) and then Next to continue, preserving your settings.");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizard.SomeContainer.Back' at Center.", repo.ImportWizard.SomeContainer.BackInfo, new RecordItemIndex(6));
            repo.ImportWizard.SomeContainer.Back.Click();
            Delay.Milliseconds(200);
            
            renameAssembly(ValueConverter.ArgumentFromString<bool>("invert", "True"));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(8));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizard.SomeContainer.Next' at Center.", repo.ImportWizard.SomeContainer.NextInfo, new RecordItemIndex(9));
            repo.ImportWizard.SomeContainer.Next.Click();
            Delay.Milliseconds(200);
            
            waitForImport();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizard.SomeContainer.Next' at Center.", repo.ImportWizard.SomeContainer.NextInfo, new RecordItemIndex(11));
            repo.ImportWizard.SomeContainer.Next.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'True' on item 'ImportWizard.SomeContainer.OpenFP'.", repo.ImportWizard.SomeContainer.OpenFPInfo, new RecordItemIndex(12));
            repo.ImportWizard.SomeContainer.OpenFP.Element.SetAttributeValue("Checked", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set Value", "Setting attribute Checked to 'True' on item 'ImportWizard.SomeContainer.ImportDataFromCheckbox'.", repo.ImportWizard.SomeContainer.ImportDataFromCheckboxInfo, new RecordItemIndex(13));
            repo.ImportWizard.SomeContainer.ImportDataFromCheckbox.Element.SetAttributeValue("Checked", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ImportWizard.SomeContainer.Finish' at Center.", repo.ImportWizard.SomeContainer.FinishInfo, new RecordItemIndex(14));
            repo.ImportWizard.SomeContainer.Finish.Click();
            Delay.Milliseconds(200);
            
            waitForImport();
            Delay.Milliseconds(0);
            
            waitForImport();
            Delay.Milliseconds(0);
            
            waitForImport();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ResultsAnalysis.ResultsTab'.", repo.ResultsAnalysis.ResultsTabInfo, new RecordItemIndex(18));
            Validate.Exists(repo.ResultsAnalysis.ResultsTabInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Selected='True') on item 'ResultsAnalysis.ResultsTab'.", repo.ResultsAnalysis.ResultsTabInfo, new RecordItemIndex(19));
            Validate.Attribute(repo.ResultsAnalysis.ResultsTabInfo, "Selected", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'FolderPollManager.FolderPollManager1'.", repo.FolderPollManager.FolderPollManager1Info, new RecordItemIndex(20));
            Validate.Exists(repo.FolderPollManager.FolderPollManager1Info);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
