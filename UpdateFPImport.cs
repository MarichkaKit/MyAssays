///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace MyAssays.Wizard.RanorexTests
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The UpdateFPImport recording.
    /// </summary>
    [TestModule("d80bf64e-bd21-4cc5-b70f-5a1c903b084e", ModuleType.Recording, 1)]
    public partial class UpdateFPImport : ITestModule
    {
        /// <summary>
        /// Holds an instance of the MyAssays_Wizard_RanorexTestsRepository repository.
        /// </summary>
        public static MyAssays_Wizard_RanorexTestsRepository repo = MyAssays_Wizard_RanorexTestsRepository.Instance;

        static UpdateFPImport instance = new UpdateFPImport();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public UpdateFPImport()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static UpdateFPImport Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(0));
            Delay.Duration(5000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='The Folder Poll application can be configured to automatically launch this protocol the next time a new file is detected in the folder:') on item 'ImportWizard.SomeContainer.TheFolderPollApplicationCanBeConfi'.", repo.ImportWizard.SomeContainer.TheFolderPollApplicationCanBeConfiInfo, new RecordItemIndex(1));
                Validate.Attribute(repo.ImportWizard.SomeContainer.TheFolderPollApplicationCanBeConfiInfo, "Text", "The Folder Poll application can be configured to automatically launch this protocol the next time a new file is detected in the folder:", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Browse...') on item 'ImportWizard.SomeContainer.Browse'.", repo.ImportWizard.SomeContainer.BrowseInfo, new RecordItemIndex(2));
                Validate.Attribute(repo.ImportWizard.SomeContainer.BrowseInfo, "Text", "Browse...", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='The files to process can be restricted by providing a file filter:') on item 'ImportWizard.SomeContainer.TheFilesToProcessCanBeRestrictedB'.", repo.ImportWizard.SomeContainer.TheFilesToProcessCanBeRestrictedBInfo, new RecordItemIndex(3));
                Validate.Attribute(repo.ImportWizard.SomeContainer.TheFilesToProcessCanBeRestrictedBInfo, "Text", "The files to process can be restricted by providing a file filter:", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='*.txt') on item 'ImportWizard.SomeContainer.TextAsteriskTxt'.", repo.ImportWizard.SomeContainer.TextAsteriskTxtInfo, new RecordItemIndex(4));
                Validate.Attribute(repo.ImportWizard.SomeContainer.TextAsteriskTxtInfo, "Text", "*.txt", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Select what should happen when a new file is detected in this folder:') on item 'ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFil'.", repo.ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFilInfo, new RecordItemIndex(5));
                Validate.Attribute(repo.ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFilInfo, "Text", "Select what should happen when a new file is detected in this folder:", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Select what should happen when a new file is detected in this folder:') on item 'ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFil'.", repo.ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFilInfo, new RecordItemIndex(6));
                Validate.Attribute(repo.ImportWizard.SomeContainer.SelectWhatShouldHappenWhenANewFilInfo, "Text", "Select what should happen when a new file is detected in this folder:", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch protocol and import data ready for review.') on item 'ImportWizard.SomeContainer.LaunchProtocolAndImportDataReadyFo'.", repo.ImportWizard.SomeContainer.LaunchProtocolAndImportDataReadyFoInfo, new RecordItemIndex(7));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchProtocolAndImportDataReadyFoInfo, "Text", "Launch protocol and import data ready for review.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Enabled='True') on item 'ImportWizard.SomeContainer.Next'.", repo.ImportWizard.SomeContainer.NextInfo, new RecordItemIndex(8));
                Validate.Attribute(repo.ImportWizard.SomeContainer.NextInfo, "Enabled", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Next') on item 'ImportWizard.SomeContainer.Next'.", repo.ImportWizard.SomeContainer.NextInfo, new RecordItemIndex(9));
                Validate.Attribute(repo.ImportWizard.SomeContainer.NextInfo, "Text", "Next", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ImportWizard.SomeContainer.ToggleButton1' at 441;6.", repo.ImportWizard.SomeContainer.ToggleButton1Info, new RecordItemIndex(10));
                repo.ImportWizard.SomeContainer.ToggleButton1.Click("441;6");
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch protocol, import data, perform analysis, create and open PDF then exit.') on item 'ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn'.", repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAnInfo, new RecordItemIndex(11));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAnInfo, "Text", "Launch protocol, import data, perform analysis, create and open PDF then exit.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch protocol, import data, perform analysis, create and open XLSX then exit.') on item 'ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn1'.", repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn1Info, new RecordItemIndex(12));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn1Info, "Text", "Launch protocol, import data, perform analysis, create and open XLSX then exit.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch protocol, import data, perform analysis, create and open DOCX then exit.') on item 'ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn2'.", repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn2Info, new RecordItemIndex(13));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn2Info, "Text", "Launch protocol, import data, perform analysis, create and open DOCX then exit.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch protocol, import data, perform analysis, print then exit.') on item 'ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn3'.", repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn3Info, new RecordItemIndex(14));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchProtocolImportDataPerformAn3Info, "Text", "Launch protocol, import data, perform analysis, print then exit.", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Advanced...') on item 'ImportWizard.SomeContainer.Advanced'.", repo.ImportWizard.SomeContainer.AdvancedInfo, new RecordItemIndex(15));
                Validate.Attribute(repo.ImportWizard.SomeContainer.AdvancedInfo, "Text", "Advanced...", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Set Value", "(Optional Action)\r\nSetting attribute Selected to 'True' on item 'ImportWizard.SomeContainer.Advanced'.", repo.ImportWizard.SomeContainer.AdvancedInfo, new RecordItemIndex(16));
                repo.ImportWizard.SomeContainer.Advanced.Element.SetAttributeValue("Selected", "True");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ImportWizard.SomeContainer.ToggleButton1' at Center.", repo.ImportWizard.SomeContainer.ToggleButton1Info, new RecordItemIndex(17));
                repo.ImportWizard.SomeContainer.ToggleButton1.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Enabled='True') on item 'ImportWizard.SomeContainer.Calculate'.", repo.ImportWizard.SomeContainer.CalculateInfo, new RecordItemIndex(18));
                Validate.Attribute(repo.ImportWizard.SomeContainer.CalculateInfo, "Enabled", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.Calculate'.", repo.ImportWizard.SomeContainer.CalculateInfo, new RecordItemIndex(19));
                Validate.Attribute(repo.ImportWizard.SomeContainer.CalculateInfo, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Calculate') on item 'ImportWizard.SomeContainer.Calculate'.", repo.ImportWizard.SomeContainer.CalculateInfo, new RecordItemIndex(20));
                Validate.Attribute(repo.ImportWizard.SomeContainer.CalculateInfo, "Text", "Calculate", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.ExportReport2'.", repo.ImportWizard.SomeContainer.ExportReport2Info, new RecordItemIndex(21));
                Validate.Attribute(repo.ImportWizard.SomeContainer.ExportReport2Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(21)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Export report') on item 'ImportWizard.SomeContainer.ExportReport2'.", repo.ImportWizard.SomeContainer.ExportReport2Info, new RecordItemIndex(22));
                Validate.Attribute(repo.ImportWizard.SomeContainer.ExportReport2Info, "Text", "Export report", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.ToggleButton2'.", repo.ImportWizard.SomeContainer.ToggleButton2Info, new RecordItemIndex(23));
                Validate.Attribute(repo.ImportWizard.SomeContainer.ToggleButton2Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(23)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='PDF') on item 'ImportWizard.SomeContainer.TextPDF'.", repo.ImportWizard.SomeContainer.TextPDFInfo, new RecordItemIndex(24));
                Validate.Attribute(repo.ImportWizard.SomeContainer.TextPDFInfo, "Text", "PDF", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(24)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.LaunchReport2'.", repo.ImportWizard.SomeContainer.LaunchReport2Info, new RecordItemIndex(25));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchReport2Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Launch report') on item 'ImportWizard.SomeContainer.LaunchReport2'.", repo.ImportWizard.SomeContainer.LaunchReport2Info, new RecordItemIndex(26));
                Validate.Attribute(repo.ImportWizard.SomeContainer.LaunchReport2Info, "Text", "Launch report", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(26)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.Print1'.", repo.ImportWizard.SomeContainer.Print1Info, new RecordItemIndex(27));
                Validate.Attribute(repo.ImportWizard.SomeContainer.Print1Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Print') on item 'ImportWizard.SomeContainer.Print1'.", repo.ImportWizard.SomeContainer.Print1Info, new RecordItemIndex(28));
                Validate.Attribute(repo.ImportWizard.SomeContainer.Print1Info, "Text", "Print", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(28)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.Exit1'.", repo.ImportWizard.SomeContainer.Exit1Info, new RecordItemIndex(29));
                Validate.Attribute(repo.ImportWizard.SomeContainer.Exit1Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(29)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Exit') on item 'ImportWizard.SomeContainer.Exit1'.", repo.ImportWizard.SomeContainer.Exit1Info, new RecordItemIndex(30));
                Validate.Attribute(repo.ImportWizard.SomeContainer.Exit1Info, "Text", "Exit", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(30)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ImportWizard.SomeContainer.Next' at Center.", repo.ImportWizard.SomeContainer.NextInfo, new RecordItemIndex(31));
                repo.ImportWizard.SomeContainer.Next.Click();
                Delay.Milliseconds(200);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(31)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='False') on item 'ImportWizard.SomeContainer.SomeCheckBox2'.", repo.ImportWizard.SomeContainer.SomeCheckBox2Info, new RecordItemIndex(32));
                Validate.Attribute(repo.ImportWizard.SomeContainer.SomeCheckBox2Info, "Checked", "False", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(32)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Open Folder Poll Manager to review changes') on item 'ImportWizard.SomeContainer.OpenFolderPollManagerToReviewChang'.", repo.ImportWizard.SomeContainer.OpenFolderPollManagerToReviewChangInfo, new RecordItemIndex(33));
                Validate.Attribute(repo.ImportWizard.SomeContainer.OpenFolderPollManagerToReviewChangInfo, "Text", "Open Folder Poll Manager to review changes", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(33)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='True') on item 'ImportWizard.SomeContainer.SomeCheckBox3'.", repo.ImportWizard.SomeContainer.SomeCheckBox3Info, new RecordItemIndex(34));
                Validate.Attribute(repo.ImportWizard.SomeContainer.SomeCheckBox3Info, "Checked", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(34)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Import data from ') on item 'ImportWizard.SomeContainer.ImportDataFrom'.", repo.ImportWizard.SomeContainer.ImportDataFromInfo, new RecordItemIndex(35));
                Validate.Attribute(repo.ImportWizard.SomeContainer.ImportDataFromInfo, "Text", "Import data from ", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Summary:') on item 'ImportWizard.SomeContainer.Summary'.", repo.ImportWizard.SomeContainer.SummaryInfo, new RecordItemIndex(36));
                Validate.Attribute(repo.ImportWizard.SomeContainer.SummaryInfo, "Text", "Summary:", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(36)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Measurement data is imported') on item 'ImportWizard.SomeContainer.MeasurementDataIsImported'.", repo.ImportWizard.SomeContainer.MeasurementDataIsImportedInfo, new RecordItemIndex(37));
                Validate.Attribute(repo.ImportWizard.SomeContainer.MeasurementDataIsImportedInfo, "Text", "Measurement data is imported", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Enabled='True') on item 'ImportWizard.SomeContainer.Finish'.", repo.ImportWizard.SomeContainer.FinishInfo, new RecordItemIndex(38));
                Validate.Attribute(repo.ImportWizard.SomeContainer.FinishInfo, "Enabled", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(38)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Text='Finish') on item 'ImportWizard.SomeContainer.Finish'.", repo.ImportWizard.SomeContainer.FinishInfo, new RecordItemIndex(39));
                Validate.Attribute(repo.ImportWizard.SomeContainer.FinishInfo, "Text", "Finish", Validate.DefaultMessage, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(39)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'ImportWizard.Close' at 31;10.", repo.ImportWizard.CloseInfo, new RecordItemIndex(40));
                repo.ImportWizard.Close.Click("31;10");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
